// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/grpc/grpc.go
//
// Generated by this command:
//
//	mockgen -source=internal/handler/grpc/grpc.go -destination=./gen/mocks/mock_grpc.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	model "pickfighter.com/fighters/pkg/model"
)

// MockFightersController is a mock of FightersController interface.
type MockFightersController struct {
	ctrl     *gomock.Controller
	recorder *MockFightersControllerMockRecorder
}

// MockFightersControllerMockRecorder is the mock recorder for MockFightersController.
type MockFightersControllerMockRecorder struct {
	mock *MockFightersController
}

// NewMockFightersController creates a new mock instance.
func NewMockFightersController(ctrl *gomock.Controller) *MockFightersController {
	mock := &MockFightersController{ctrl: ctrl}
	mock.recorder = &MockFightersControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFightersController) EXPECT() *MockFightersControllerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockFightersController) HealthCheck() *model.HealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(*model.HealthStatus)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockFightersControllerMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockFightersController)(nil).HealthCheck))
}

// SearchFighters mocks base method.
func (m *MockFightersController) SearchFighters(ctx context.Context, req *model.FightersRequest) ([]*model.Fighter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFighters", ctx, req)
	ret0, _ := ret[0].([]*model.Fighter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFighters indicates an expected call of SearchFighters.
func (mr *MockFightersControllerMockRecorder) SearchFighters(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFighters", reflect.TypeOf((*MockFightersController)(nil).SearchFighters), ctx, req)
}

// SearchFightersCount mocks base method.
func (m *MockFightersController) SearchFightersCount(ctx context.Context, req *model.FightersRequest) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFightersCount", ctx, req)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFightersCount indicates an expected call of SearchFightersCount.
func (mr *MockFightersControllerMockRecorder) SearchFightersCount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFightersCount", reflect.TypeOf((*MockFightersController)(nil).SearchFightersCount), ctx, req)
}
