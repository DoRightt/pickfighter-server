name: CI for Fighters Service

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'fighters/**'
#   pull_request:
#     branches:
#       - main
#     paths:
#       - 'fighters/**'

on: [push, workflow_dispatch]

jobs:
  setup-db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build and Run PostgreSQL Container
        run: |
          bash ./scripts/test_db.sh
          
      - name: Wait for DB to be ready
        run: |
          until docker exec test-db pg_isready; do
            echo "Waiting for database connection..."
            sleep 30
          done
        shell: bash

  build-and-test:
    runs-on: ubuntu-latest
    needs: setup-db
    env:
      APP_ENV: ci
      POSTGRES_DATA_DIR: ${{ secrets.POSTGRES_TEST_DATA_DIR }}
      POSTGRES_URL: ${{ secrets.POSTGRES_TEST_URL }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_TEST_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_TEST_PORT }}
      POSTGRES_NAME: ${{ secrets.POSTGRES_TEST_NAME }}
      POSTGRES_USER: ${{ secrets.POSTGRES_TEST_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_TEST_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Clean up old build files
        run: rm -rf fighters/bin/*

      - name: Build service
        run: go build -o fighters/bin/service ./fighters

      - name: Check if DB container is running
        run: docker ps

      - name: Test
        working-directory: ./fighters
        run: bash scripts/test.sh

      - name: Check test coverage
        working-directory: ./fighters
        run: bash scripts/coverage.sh

      - name: Ensure coverage is above 65%
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total: | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$coverage < 65" | bc -l) )); then
            echo "Test coverage is below 65% ($coverage%)"
            exit 1
          else
            echo "Test coverage is $coverage%"
          fi