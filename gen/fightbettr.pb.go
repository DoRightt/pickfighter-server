// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: pickfighter.proto

package gen

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Token    string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	TermsOk  bool   `protobuf:"varint,5,opt,name=termsOk,proto3" json:"termsOk,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterRequest) GetTermsOk() bool {
	if x != nil {
		return x.TermsOk
	}
	return false
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RegisterConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RegisterConfirmRequest) Reset() {
	*x = RegisterConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConfirmRequest) ProtoMessage() {}

func (x *RegisterConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConfirmRequest.ProtoReflect.Descriptor instead.
func (*RegisterConfirmRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterConfirmRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegisterConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *empty.Empty `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RegisterConfirmResponse) Reset() {
	*x = RegisterConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConfirmResponse) ProtoMessage() {}

func (x *RegisterConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConfirmResponse.ProtoReflect.Descriptor instead.
func (*RegisterConfirmResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterConfirmResponse) GetResponse() *empty.Empty {
	if x != nil {
		return x.Response
	}
	return nil
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password   string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	RememberMe bool     `protobuf:"varint,3,opt,name=rememberMe,proto3" json:"rememberMe,omitempty"`
	UserAgent  string   `protobuf:"bytes,4,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	IpAddress  string   `protobuf:"bytes,5,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Subject    string   `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	ExpiresIn  int64    `protobuf:"varint,7,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	Audience   []string `protobuf:"bytes,8,rep,name=audience,proto3" json:"audience,omitempty"`
	Method     int32    `protobuf:"varint,9,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{4}
}

func (x *AuthenticateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AuthenticateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthenticateRequest) GetRememberMe() bool {
	if x != nil {
		return x.RememberMe
	}
	return false
}

func (x *AuthenticateRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AuthenticateRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *AuthenticateRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AuthenticateRequest) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *AuthenticateRequest) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *AuthenticateRequest) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId        string               `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AccessToken    string               `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	ExpirationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ExpirationTime,proto3" json:"ExpirationTime,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{5}
}

func (x *AuthenticateResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *AuthenticateResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AuthenticateResponse) GetExpirationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

type PasswordResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *PasswordResetRequest) Reset() {
	*x = PasswordResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetRequest) ProtoMessage() {}

func (x *PasswordResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetRequest.ProtoReflect.Descriptor instead.
func (*PasswordResetRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{6}
}

func (x *PasswordResetRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type PasswordResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *empty.Empty `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PasswordResetResponse) Reset() {
	*x = PasswordResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetResponse) ProtoMessage() {}

func (x *PasswordResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetResponse.ProtoReflect.Descriptor instead.
func (*PasswordResetResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{7}
}

func (x *PasswordResetResponse) GetResponse() *empty.Empty {
	if x != nil {
		return x.Response
	}
	return nil
}

type PasswordRecoveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ConfirmPassword string `protobuf:"bytes,3,opt,name=confirmPassword,proto3" json:"confirmPassword,omitempty"`
}

func (x *PasswordRecoveryRequest) Reset() {
	*x = PasswordRecoveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRecoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRecoveryRequest) ProtoMessage() {}

func (x *PasswordRecoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRecoveryRequest.ProtoReflect.Descriptor instead.
func (*PasswordRecoveryRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{8}
}

func (x *PasswordRecoveryRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PasswordRecoveryRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PasswordRecoveryRequest) GetConfirmPassword() string {
	if x != nil {
		return x.ConfirmPassword
	}
	return ""
}

type PasswordRecoveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *empty.Empty `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PasswordRecoveryResponse) Reset() {
	*x = PasswordRecoveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRecoveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRecoveryResponse) ProtoMessage() {}

func (x *PasswordRecoveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRecoveryResponse.ProtoReflect.Descriptor instead.
func (*PasswordRecoveryResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordRecoveryResponse) GetResponse() *empty.Empty {
	if x != nil {
		return x.Response
	}
	return nil
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{10}
}

func (x *ProfileRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{11}
}

func (x *ProfileResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Rank      string `protobuf:"bytes,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Claim     string `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
	Roles     uint64 `protobuf:"varint,6,opt,name=roles,proto3" json:"roles,omitempty"`
	Flags     uint64 `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	CreatedAt int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{12}
}

func (x *User) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *User) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *User) GetRoles() uint64 {
	if x != nil {
		return x.Roles
	}
	return 0
}

func (x *User) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *User) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *User) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fights []*Fight `protobuf:"bytes,2,rep,name=fights,proto3" json:"fights,omitempty"`
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{13}
}

func (x *CreateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRequest) GetFights() []*Fight {
	if x != nil {
		return x.Fights
	}
	return nil
}

type CreateEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int32 `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateEventResponse) Reset() {
	*x = CreateEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventResponse) ProtoMessage() {}

func (x *CreateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEventResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{14}
}

func (x *CreateEventResponse) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *empty.Empty `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{15}
}

func (x *GetEventsRequest) GetResponse() *empty.Empty {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int32    `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Events []*Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{16}
}

func (x *GetEventsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type CreateBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId     int32 `protobuf:"varint,1,opt,name=betId,proto3" json:"betId,omitempty"`
	FightId   int32 `protobuf:"varint,2,opt,name=fightId,proto3" json:"fightId,omitempty"`
	UserId    int32 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FighterId int32 `protobuf:"varint,4,opt,name=fighterId,proto3" json:"fighterId,omitempty"`
}

func (x *CreateBetRequest) Reset() {
	*x = CreateBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBetRequest) ProtoMessage() {}

func (x *CreateBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBetRequest.ProtoReflect.Descriptor instead.
func (*CreateBetRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{17}
}

func (x *CreateBetRequest) GetBetId() int32 {
	if x != nil {
		return x.BetId
	}
	return 0
}

func (x *CreateBetRequest) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *CreateBetRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateBetRequest) GetFighterId() int32 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

type CreateBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId int32 `protobuf:"varint,1,opt,name=betId,proto3" json:"betId,omitempty"`
}

func (x *CreateBetResponse) Reset() {
	*x = CreateBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBetResponse) ProtoMessage() {}

func (x *CreateBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBetResponse.ProtoReflect.Descriptor instead.
func (*CreateBetResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{18}
}

func (x *CreateBetResponse) GetBetId() int32 {
	if x != nil {
		return x.BetId
	}
	return 0
}

type BetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *BetsRequest) Reset() {
	*x = BetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetsRequest) ProtoMessage() {}

func (x *BetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetsRequest.ProtoReflect.Descriptor instead.
func (*BetsRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{19}
}

func (x *BetsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Bets  []*Bet `protobuf:"bytes,2,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *BetsResponse) Reset() {
	*x = BetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetsResponse) ProtoMessage() {}

func (x *BetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetsResponse.ProtoReflect.Descriptor instead.
func (*BetsResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{20}
}

func (x *BetsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BetsResponse) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type FightResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId    int32 `protobuf:"varint,1,opt,name=fightId,proto3" json:"fightId,omitempty"`
	WinnerId   int32 `protobuf:"varint,2,opt,name=winnerId,proto3" json:"winnerId,omitempty"`
	NotContest bool  `protobuf:"varint,3,opt,name=notContest,proto3" json:"notContest,omitempty"`
}

func (x *FightResultRequest) Reset() {
	*x = FightResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultRequest) ProtoMessage() {}

func (x *FightResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultRequest.ProtoReflect.Descriptor instead.
func (*FightResultRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{21}
}

func (x *FightResultRequest) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightResultRequest) GetWinnerId() int32 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *FightResultRequest) GetNotContest() bool {
	if x != nil {
		return x.NotContest
	}
	return false
}

type FightResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId int32 `protobuf:"varint,1,opt,name=fightId,proto3" json:"fightId,omitempty"`
}

func (x *FightResultResponse) Reset() {
	*x = FightResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultResponse) ProtoMessage() {}

func (x *FightResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultResponse.ProtoReflect.Descriptor instead.
func (*FightResultResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{22}
}

func (x *FightResultResponse) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

type Fight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId       int32 `protobuf:"varint,1,opt,name=fightId,proto3" json:"fightId,omitempty"`
	EventId       int32 `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	FighterRedId  int32 `protobuf:"varint,3,opt,name=fighterRedId,proto3" json:"fighterRedId,omitempty"`
	FighterBlueId int32 `protobuf:"varint,4,opt,name=fighterBlueId,proto3" json:"fighterBlueId,omitempty"`
	IsDone        bool  `protobuf:"varint,5,opt,name=isDone,proto3" json:"isDone,omitempty"`
	IsCanceled    bool  `protobuf:"varint,6,opt,name=isCanceled,proto3" json:"isCanceled,omitempty"`
	NotContest    bool  `protobuf:"varint,7,opt,name=notContest,proto3" json:"notContest,omitempty"`
	Result        int32 `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	CreatedAt     int64 `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	FightDate     int64 `protobuf:"varint,10,opt,name=fightDate,proto3" json:"fightDate,omitempty"`
}

func (x *Fight) Reset() {
	*x = Fight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fight) ProtoMessage() {}

func (x *Fight) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fight.ProtoReflect.Descriptor instead.
func (*Fight) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{23}
}

func (x *Fight) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *Fight) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Fight) GetFighterRedId() int32 {
	if x != nil {
		return x.FighterRedId
	}
	return 0
}

func (x *Fight) GetFighterBlueId() int32 {
	if x != nil {
		return x.FighterBlueId
	}
	return 0
}

func (x *Fight) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *Fight) GetIsCanceled() bool {
	if x != nil {
		return x.IsCanceled
	}
	return false
}

func (x *Fight) GetNotContest() bool {
	if x != nil {
		return x.NotContest
	}
	return false
}

func (x *Fight) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Fight) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Fight) GetFightDate() int64 {
	if x != nil {
		return x.FightDate
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int32    `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Fights  []*Fight `protobuf:"bytes,3,rep,name=fights,proto3" json:"fights,omitempty"`
	IsDone  bool     `protobuf:"varint,4,opt,name=isDone,proto3" json:"isDone,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{24}
}

func (x *Event) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetFights() []*Fight {
	if x != nil {
		return x.Fights
	}
	return nil
}

func (x *Event) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

// TODO change Bet and BetRequest models
type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId     int32 `protobuf:"varint,1,opt,name=betId,proto3" json:"betId,omitempty"`
	FightId   int32 `protobuf:"varint,2,opt,name=fightId,proto3" json:"fightId,omitempty"`
	UserId    int32 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FighterId int32 `protobuf:"varint,4,opt,name=fighterId,proto3" json:"fighterId,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{25}
}

func (x *Bet) GetBetId() int32 {
	if x != nil {
		return x.BetId
	}
	return 0
}

func (x *Bet) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *Bet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Bet) GetFighterId() int32 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

type Fighter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FighterId      int32         `protobuf:"varint,1,opt,name=fighterId,proto3" json:"fighterId,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NickName       string        `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Division       int32         `protobuf:"varint,4,opt,name=division,proto3" json:"division,omitempty"`
	Status         string        `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Hometown       string        `protobuf:"bytes,6,opt,name=hometown,proto3" json:"hometown,omitempty"`
	TrainsAt       string        `protobuf:"bytes,7,opt,name=trainsAt,proto3" json:"trainsAt,omitempty"`
	FightingStyle  string        `protobuf:"bytes,8,opt,name=fightingStyle,proto3" json:"fightingStyle,omitempty"`
	Age            int32         `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty"`
	Height         float32       `protobuf:"fixed32,10,opt,name=height,proto3" json:"height,omitempty"`
	Weight         float32       `protobuf:"fixed32,11,opt,name=weight,proto3" json:"weight,omitempty"`
	OctagonDebut   string        `protobuf:"bytes,12,opt,name=octagonDebut,proto3" json:"octagonDebut,omitempty"`
	DebutTimestamp int32         `protobuf:"varint,13,opt,name=debutTimestamp,proto3" json:"debutTimestamp,omitempty"`
	Reach          float32       `protobuf:"fixed32,14,opt,name=reach,proto3" json:"reach,omitempty"`
	LegReach       float32       `protobuf:"fixed32,15,opt,name=legReach,proto3" json:"legReach,omitempty"`
	Wins           int32         `protobuf:"varint,16,opt,name=wins,proto3" json:"wins,omitempty"`
	Loses          int32         `protobuf:"varint,17,opt,name=loses,proto3" json:"loses,omitempty"`
	Draw           int32         `protobuf:"varint,18,opt,name=draw,proto3" json:"draw,omitempty"`
	FighterUrl     string        `protobuf:"bytes,19,opt,name=fighterUrl,proto3" json:"fighterUrl,omitempty"`
	ImageUrl       string        `protobuf:"bytes,20,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	Stats          *FighterStats `protobuf:"bytes,21,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Fighter) Reset() {
	*x = Fighter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fighter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fighter) ProtoMessage() {}

func (x *Fighter) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fighter.ProtoReflect.Descriptor instead.
func (*Fighter) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{26}
}

func (x *Fighter) GetFighterId() int32 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *Fighter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fighter) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Fighter) GetDivision() int32 {
	if x != nil {
		return x.Division
	}
	return 0
}

func (x *Fighter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Fighter) GetHometown() string {
	if x != nil {
		return x.Hometown
	}
	return ""
}

func (x *Fighter) GetTrainsAt() string {
	if x != nil {
		return x.TrainsAt
	}
	return ""
}

func (x *Fighter) GetFightingStyle() string {
	if x != nil {
		return x.FightingStyle
	}
	return ""
}

func (x *Fighter) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Fighter) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Fighter) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Fighter) GetOctagonDebut() string {
	if x != nil {
		return x.OctagonDebut
	}
	return ""
}

func (x *Fighter) GetDebutTimestamp() int32 {
	if x != nil {
		return x.DebutTimestamp
	}
	return 0
}

func (x *Fighter) GetReach() float32 {
	if x != nil {
		return x.Reach
	}
	return 0
}

func (x *Fighter) GetLegReach() float32 {
	if x != nil {
		return x.LegReach
	}
	return 0
}

func (x *Fighter) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *Fighter) GetLoses() int32 {
	if x != nil {
		return x.Loses
	}
	return 0
}

func (x *Fighter) GetDraw() int32 {
	if x != nil {
		return x.Draw
	}
	return 0
}

func (x *Fighter) GetFighterUrl() string {
	if x != nil {
		return x.FighterUrl
	}
	return ""
}

func (x *Fighter) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Fighter) GetStats() *FighterStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type FighterStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId               int32   `protobuf:"varint,1,opt,name=statId,proto3" json:"statId,omitempty"`
	FighterId            int32   `protobuf:"varint,2,opt,name=fighterId,proto3" json:"fighterId,omitempty"`
	TotalSigStrLanded    int32   `protobuf:"varint,3,opt,name=totalSigStrLanded,proto3" json:"totalSigStrLanded,omitempty"`
	TotalSigStrAttempted int32   `protobuf:"varint,4,opt,name=totalSigStrAttempted,proto3" json:"totalSigStrAttempted,omitempty"`
	StrAccuracy          int32   `protobuf:"varint,5,opt,name=strAccuracy,proto3" json:"strAccuracy,omitempty"`
	TotalTkdLanded       int32   `protobuf:"varint,6,opt,name=totalTkdLanded,proto3" json:"totalTkdLanded,omitempty"`
	TotalTkdAttempted    int32   `protobuf:"varint,7,opt,name=totalTkdAttempted,proto3" json:"totalTkdAttempted,omitempty"`
	TkdAccuracy          int32   `protobuf:"varint,8,opt,name=tkdAccuracy,proto3" json:"tkdAccuracy,omitempty"`
	SigStrLanded         float32 `protobuf:"fixed32,9,opt,name=sigStrLanded,proto3" json:"sigStrLanded,omitempty"`
	SigStrAbs            float32 `protobuf:"fixed32,10,opt,name=sigStrAbs,proto3" json:"sigStrAbs,omitempty"`
	SigStrDefense        int32   `protobuf:"varint,11,opt,name=sigStrDefense,proto3" json:"sigStrDefense,omitempty"`
	TakedownDefense      int32   `protobuf:"varint,12,opt,name=takedownDefense,proto3" json:"takedownDefense,omitempty"`
	TakedownAvg          float32 `protobuf:"fixed32,13,opt,name=takedownAvg,proto3" json:"takedownAvg,omitempty"`
	SubmissionAvg        float32 `protobuf:"fixed32,14,opt,name=submissionAvg,proto3" json:"submissionAvg,omitempty"`
	KnockdownAvg         float32 `protobuf:"fixed32,15,opt,name=knockdownAvg,proto3" json:"knockdownAvg,omitempty"`
	AvgFightTime         string  `protobuf:"bytes,16,opt,name=avgFightTime,proto3" json:"avgFightTime,omitempty"`
	WinByKO              int32   `protobuf:"varint,17,opt,name=winByKO,proto3" json:"winByKO,omitempty"`
	WinBySub             int32   `protobuf:"varint,18,opt,name=winBySub,proto3" json:"winBySub,omitempty"`
	WinByDec             int32   `protobuf:"varint,19,opt,name=winByDec,proto3" json:"winByDec,omitempty"`
}

func (x *FighterStats) Reset() {
	*x = FighterStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterStats) ProtoMessage() {}

func (x *FighterStats) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterStats.ProtoReflect.Descriptor instead.
func (*FighterStats) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{27}
}

func (x *FighterStats) GetStatId() int32 {
	if x != nil {
		return x.StatId
	}
	return 0
}

func (x *FighterStats) GetFighterId() int32 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *FighterStats) GetTotalSigStrLanded() int32 {
	if x != nil {
		return x.TotalSigStrLanded
	}
	return 0
}

func (x *FighterStats) GetTotalSigStrAttempted() int32 {
	if x != nil {
		return x.TotalSigStrAttempted
	}
	return 0
}

func (x *FighterStats) GetStrAccuracy() int32 {
	if x != nil {
		return x.StrAccuracy
	}
	return 0
}

func (x *FighterStats) GetTotalTkdLanded() int32 {
	if x != nil {
		return x.TotalTkdLanded
	}
	return 0
}

func (x *FighterStats) GetTotalTkdAttempted() int32 {
	if x != nil {
		return x.TotalTkdAttempted
	}
	return 0
}

func (x *FighterStats) GetTkdAccuracy() int32 {
	if x != nil {
		return x.TkdAccuracy
	}
	return 0
}

func (x *FighterStats) GetSigStrLanded() float32 {
	if x != nil {
		return x.SigStrLanded
	}
	return 0
}

func (x *FighterStats) GetSigStrAbs() float32 {
	if x != nil {
		return x.SigStrAbs
	}
	return 0
}

func (x *FighterStats) GetSigStrDefense() int32 {
	if x != nil {
		return x.SigStrDefense
	}
	return 0
}

func (x *FighterStats) GetTakedownDefense() int32 {
	if x != nil {
		return x.TakedownDefense
	}
	return 0
}

func (x *FighterStats) GetTakedownAvg() float32 {
	if x != nil {
		return x.TakedownAvg
	}
	return 0
}

func (x *FighterStats) GetSubmissionAvg() float32 {
	if x != nil {
		return x.SubmissionAvg
	}
	return 0
}

func (x *FighterStats) GetKnockdownAvg() float32 {
	if x != nil {
		return x.KnockdownAvg
	}
	return 0
}

func (x *FighterStats) GetAvgFightTime() string {
	if x != nil {
		return x.AvgFightTime
	}
	return ""
}

func (x *FighterStats) GetWinByKO() int32 {
	if x != nil {
		return x.WinByKO
	}
	return 0
}

func (x *FighterStats) GetWinBySub() int32 {
	if x != nil {
		return x.WinBySub
	}
	return 0
}

func (x *FighterStats) GetWinByDec() int32 {
	if x != nil {
		return x.WinByDec
	}
	return 0
}

type FightersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FightersIds []int32 `protobuf:"varint,2,rep,packed,name=fightersIds,proto3" json:"fightersIds,omitempty"`
}

func (x *FightersRequest) Reset() {
	*x = FightersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightersRequest) ProtoMessage() {}

func (x *FightersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightersRequest.ProtoReflect.Descriptor instead.
func (*FightersRequest) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{28}
}

func (x *FightersRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FightersRequest) GetFightersIds() []int32 {
	if x != nil {
		return x.FightersIds
	}
	return nil
}

type FightersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fighters []*Fighter `protobuf:"bytes,1,rep,name=fighters,proto3" json:"fighters,omitempty"`
}

func (x *FightersResponse) Reset() {
	*x = FightersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightersResponse) ProtoMessage() {}

func (x *FightersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightersResponse.ProtoReflect.Descriptor instead.
func (*FightersResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{29}
}

func (x *FightersResponse) GetFighters() []*Fighter {
	if x != nil {
		return x.Fighters
	}
	return nil
}

type FightersCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FightersCountResponse) Reset() {
	*x = FightersCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickfighter_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightersCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightersCountResponse) ProtoMessage() {}

func (x *FightersCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickfighter_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightersCountResponse.ProtoReflect.Descriptor instead.
func (*FightersCountResponse) Descriptor() ([]byte, []int) {
	return file_pickfighter_proto_rawDescGZIP(), []int{30}
}

func (x *FightersCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_pickfighter_proto protoreflect.FileDescriptor

var file_pickfighter_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x67, 0x68, 0x74, 0x62, 0x65, 0x74, 0x74, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x87, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x6b, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e,
	0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d,
	0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x02,
	0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0x96, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4b, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x17, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xda, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x2f, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x78, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0b, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x0c, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x04, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22, 0x6a, 0x0a,
	0x12, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x13, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x05, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6d,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x6b, 0x0a,
	0x03, 0x42, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x04, 0x0a, 0x07, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x74, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x74, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x63, 0x74, 0x61,
	0x67, 0x6f, 0x6e, 0x44, 0x65, 0x62, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x63, 0x74, 0x61, 0x67, 0x6f, 0x6e, 0x44, 0x65, 0x62, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x62, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x65, 0x61, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x67, 0x52, 0x65, 0x61, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x65,
	0x67, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb4, 0x05, 0x0a, 0x0c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x53, 0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x53, 0x74, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6b, 0x64, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x6b, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x6b, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6b, 0x64, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6b, 0x64, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6b, 0x64,
	0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x41, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x41, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x53, 0x74, 0x72, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x76, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x76, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x41,
	0x76, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x41, 0x76, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76,
	0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69,
	0x6e, 0x42, 0x79, 0x4b, 0x4f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x42, 0x79, 0x4b, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x42, 0x79, 0x44, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x42, 0x79, 0x44, 0x65, 0x63, 0x22, 0x4b, 0x0a, 0x0f,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x73, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x10, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0xf0, 0x02, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x17, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x14, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x15, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x90, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x74, 0x12, 0x11, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x89, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x10, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pickfighter_proto_rawDescOnce sync.Once
	file_pickfighter_proto_rawDescData = file_pickfighter_proto_rawDesc
)

func file_pickfighter_proto_rawDescGZIP() []byte {
	file_pickfighter_proto_rawDescOnce.Do(func() {
		file_pickfighter_proto_rawDescData = protoimpl.X.CompressGZIP(file_pickfighter_proto_rawDescData)
	})
	return file_pickfighter_proto_rawDescData
}

var file_pickfighter_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pickfighter_proto_goTypes = []interface{}{
	(*RegisterRequest)(nil),          // 0: RegisterRequest
	(*RegisterResponse)(nil),         // 1: RegisterResponse
	(*RegisterConfirmRequest)(nil),   // 2: RegisterConfirmRequest
	(*RegisterConfirmResponse)(nil),  // 3: RegisterConfirmResponse
	(*AuthenticateRequest)(nil),      // 4: AuthenticateRequest
	(*AuthenticateResponse)(nil),     // 5: AuthenticateResponse
	(*PasswordResetRequest)(nil),     // 6: PasswordResetRequest
	(*PasswordResetResponse)(nil),    // 7: PasswordResetResponse
	(*PasswordRecoveryRequest)(nil),  // 8: PasswordRecoveryRequest
	(*PasswordRecoveryResponse)(nil), // 9: PasswordRecoveryResponse
	(*ProfileRequest)(nil),           // 10: ProfileRequest
	(*ProfileResponse)(nil),          // 11: ProfileResponse
	(*User)(nil),                     // 12: User
	(*CreateEventRequest)(nil),       // 13: CreateEventRequest
	(*CreateEventResponse)(nil),      // 14: CreateEventResponse
	(*GetEventsRequest)(nil),         // 15: GetEventsRequest
	(*GetEventsResponse)(nil),        // 16: GetEventsResponse
	(*CreateBetRequest)(nil),         // 17: CreateBetRequest
	(*CreateBetResponse)(nil),        // 18: CreateBetResponse
	(*BetsRequest)(nil),              // 19: BetsRequest
	(*BetsResponse)(nil),             // 20: BetsResponse
	(*FightResultRequest)(nil),       // 21: FightResultRequest
	(*FightResultResponse)(nil),      // 22: FightResultResponse
	(*Fight)(nil),                    // 23: Fight
	(*Event)(nil),                    // 24: Event
	(*Bet)(nil),                      // 25: Bet
	(*Fighter)(nil),                  // 26: Fighter
	(*FighterStats)(nil),             // 27: FighterStats
	(*FightersRequest)(nil),          // 28: FightersRequest
	(*FightersResponse)(nil),         // 29: FightersResponse
	(*FightersCountResponse)(nil),    // 30: FightersCountResponse
	(*empty.Empty)(nil),              // 31: google.protobuf.Empty
	(*timestamp.Timestamp)(nil),      // 32: google.protobuf.Timestamp
}
var file_pickfighter_proto_depIdxs = []int32{
	31, // 0: RegisterConfirmResponse.response:type_name -> google.protobuf.Empty
	32, // 1: AuthenticateResponse.ExpirationTime:type_name -> google.protobuf.Timestamp
	31, // 2: PasswordResetResponse.response:type_name -> google.protobuf.Empty
	31, // 3: PasswordRecoveryResponse.response:type_name -> google.protobuf.Empty
	12, // 4: ProfileResponse.user:type_name -> User
	23, // 5: CreateEventRequest.fights:type_name -> Fight
	31, // 6: GetEventsRequest.response:type_name -> google.protobuf.Empty
	24, // 7: GetEventsResponse.events:type_name -> Event
	25, // 8: BetsResponse.bets:type_name -> Bet
	23, // 9: Event.fights:type_name -> Fight
	27, // 10: Fighter.stats:type_name -> FighterStats
	26, // 11: FightersResponse.fighters:type_name -> Fighter
	0,  // 12: AuthService.Register:input_type -> RegisterRequest
	2,  // 13: AuthService.RegisterConfirm:input_type -> RegisterConfirmRequest
	4,  // 14: AuthService.Login:input_type -> AuthenticateRequest
	6,  // 15: AuthService.PasswordReset:input_type -> PasswordResetRequest
	8,  // 16: AuthService.PasswordRecover:input_type -> PasswordRecoveryRequest
	10, // 17: AuthService.Profile:input_type -> ProfileRequest
	13, // 18: EventService.CreateEvent:input_type -> CreateEventRequest
	15, // 19: EventService.GetEvents:input_type -> GetEventsRequest
	17, // 20: EventService.CreateBet:input_type -> CreateBetRequest
	19, // 21: EventService.GetBets:input_type -> BetsRequest
	21, // 22: EventService.SetResult:input_type -> FightResultRequest
	28, // 23: FightersService.SearchFightersCount:input_type -> FightersRequest
	28, // 24: FightersService.SearchFighters:input_type -> FightersRequest
	1,  // 25: AuthService.Register:output_type -> RegisterResponse
	3,  // 26: AuthService.RegisterConfirm:output_type -> RegisterConfirmResponse
	5,  // 27: AuthService.Login:output_type -> AuthenticateResponse
	7,  // 28: AuthService.PasswordReset:output_type -> PasswordResetResponse
	9,  // 29: AuthService.PasswordRecover:output_type -> PasswordRecoveryResponse
	11, // 30: AuthService.Profile:output_type -> ProfileResponse
	14, // 31: EventService.CreateEvent:output_type -> CreateEventResponse
	16, // 32: EventService.GetEvents:output_type -> GetEventsResponse
	18, // 33: EventService.CreateBet:output_type -> CreateBetResponse
	20, // 34: EventService.GetBets:output_type -> BetsResponse
	22, // 35: EventService.SetResult:output_type -> FightResultResponse
	30, // 36: FightersService.SearchFightersCount:output_type -> FightersCountResponse
	29, // 37: FightersService.SearchFighters:output_type -> FightersResponse
	25, // [25:38] is the sub-list for method output_type
	12, // [12:25] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pickfighter_proto_init() }
func file_pickfighter_proto_init() {
	if File_pickfighter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pickfighter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRecoveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRecoveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fighter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FighterStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickfighter_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightersCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pickfighter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_pickfighter_proto_goTypes,
		DependencyIndexes: file_pickfighter_proto_depIdxs,
		MessageInfos:      file_pickfighter_proto_msgTypes,
	}.Build()
	File_pickfighter_proto = out.File
	file_pickfighter_proto_rawDesc = nil
	file_pickfighter_proto_goTypes = nil
	file_pickfighter_proto_depIdxs = nil
}
